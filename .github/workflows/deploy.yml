# Workflow to build the production web app and deploy the production web app and database for Board Board.
name: Build and Deploy

on:
  # Runs on any commits to the main branch
  push:
    branches: ["main"]

  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  actions: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "build-and-deploy"
  cancel-in-progress: true

jobs:
  # Build the web app
  build:
    runs-on: ubuntu-latest
    outputs:
      build-status: ${{ steps.build_outcome.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build app
        id: build_outcome
        run: npm run build

      - name: Notify build success
        if: success()
        run: echo "✅ Build succeeded!"

      - name: Notify build failed
        if: failure()
        run: echo "❌ Build failed. No deployment will occur."

  # Deploy the web app to GitHub Pages and the database to Supabase in parallel.
  # `fail-fast: true` will cancel all parallel jobs if one fails.
  # Uses production environment to access secrets from the GitHub production environment.
  deploy_matrix:
    needs: build
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [web, database]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # --- Web Deployment ---
      - name: Setup Pages
        if: matrix.target == 'web'
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        if: matrix.target == 'web'
        uses: actions/upload-pages-artifact@v4
        with:
          path: "./dist"

      - name: Deploy to GitHub Pages
        if: matrix.target == 'web'
        id: deployment
        uses: actions/deploy-pages@v4

      # --- Database Deployment ---
      - name: Install Supabase CLI
        if: matrix.target == 'database'
        run: |
          curl -fsSL https://cli.supabase.com/install.sh | sh -s -- -b /usr/local/bin

      - name: Push Supabase migrations to production
        if: matrix.target == 'database'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase link --project-ref your-production-project-ref --password $SUPABASE_DB_PASSWORD
          supabase db push

  # Print results.
  # Prints "✅ Both deployments succeeded!" if both web and database deployments passed.
  # Prints "❌ Deployment failed. Both web & database deploys cancelled or rolled back." if either deployment failed.
  # `if always()` is used to ensure that the results will be printed even if the 'deploy_matrix' job failed.
  finalize:
    needs: deploy_matrix
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Report outcome
        run: |
          if [ "${{ needs.deploy_matrix.result }}" == "success" ]; then
            echo "✅ Both deployments succeeded!"
          else
            echo "❌ Deployment failed. Both web & database deploys cancelled or rolled back."
            exit 1
          fi
